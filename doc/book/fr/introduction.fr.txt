.. -*- coding: utf-8 -*-

.. _Overview:

Aperçu rapide de `CubicWeb`
===========================

`CubicWeb` nous permet de développer des instances d'applications web
basées sur un ou plusieurs `cube`. 

Ce à quoi nous réferrons en parlant de `cube` est un modèle définissant 
des types de données et des vues. Un `cube` est un composant re-utilisable 
regroupé avec d'autres cubes sur le système de fichiers.

Un `instance` réferre à une installation spécifique d'un cube où sont regroupés
tous les fichiers de configuration de l'application web finale.

Dans ce document, nous allons vous montrer comment créer un cube et l'utiliser
dans une instance pour votre application web.

Créez votre cube
----------------

Après avoir installé votre environement de développement `CubicWeb`, vous pouvez
commencer à construire votre premier cube: ::

  cubicweb-ctl newcube blog

Cela va créer dans ``/path/to/forest/cubes`` une répertoire contenant ::

  blog/
  |
  |-- data/
  |   |-- cubes.blog.css
  |   |-- cubes.blog.js  
  |   |-- external_resources
  |
  |-- debian/
  |   |-- changelog
  |   |-- compat
  |   |-- control
  |   |-- copyright
  |   |-- cubicweb-blog.prerm
  |   |-- rules
  |
  |-- entities.py
  |
  |-- i18n/
  |   |-- en.po
  |   |-- fr.po
  |
  |-- __init__.py
  |
  |-- MANIFEST.in
  |
  |-- migration/
  |   |-- postcreate.py
  |   |-- precreate.py
  |
  |-- __pkginfo__.py
  |
  |-- schema.py
  |
  |-- setup.py
  |
  |-- site_cubicweb.py
  |
  |-- sobjects.py
  |
  |-- test/
  |   |-- data/
  |       |-- bootstrap_cubes
  |   |-- pytestconf.py
  |   |-- realdb_test_blog.py
  |   |-- test_blog.py
  |
  |-- views.py

Toute modification apportée à votre modele de données devra
etre effectué dans ce répertoire. 



Définissez votre schéma de données
----------------------------------

Le modèle de données ou schéma est au coeur d'une application `CubicWeb`.
C'est là où vous allez devoir définir le type de contenu que votre application
devra gérer.

Votre modele de données est défini dans le fichier ``schema.py`` de votre cube
``blog`` comme suit.

::

  from cubicweb.schema import format_constraint
  class Blog(EntityType):
    title = String(maxsize=50, required=True)
    description = String()

  class BlogEntry(EntityType):
    title = String(required=True, fulltextindexed=True, maxsize=256)
    publish_date = Date(default='TODAY')
    content = String(required=True, fulltextindexed=True)
    entry_of = SubjectRelation('Blog', cardinality='?*') 

Un ``Blog`` a un titre et une description. Le titre est une chaîne 
de caractères requise par la classe parente EntityType et ne doit
pas excéder 50 caractères. La description est une chaîne de 
caractères sans contraintes.

Une ``BlogEntry`` a un titre, une date de publication et du texte
étant son contenu. Le titre est une chaîne de caractères qui ne 
doit pas excéder 100 caractères. La date de publication est de type Date et a
pour valeur par défaut TODAY, ce qui signifie que lorsqu'une 
``BlogEntry`` sera créée, sa date de publication sera la date
courante a moins de modifier ce champ. Le texte est une chaîne de
caractères qui sera indexée en plein texte et sans contraintes.

Une ``BlogEntry`` a aussi une relation nommée ``entry_of`` qui la
relie à un ``Blog``. La cardinalité ``?*`` signifie que BlogEntry
peut faire partie de zero a un Blog (``?`` signifie `zero ou un`) et
qu'un Blog peut avoir une infinité de BlogEntry (``*`` signifie
`n'importe quel nombre incluant zero`). 
Par soucis de complétude, nous rappellerons que ``+`` signifie
`un ou plus`.


Créez votre instance
--------------------

::
  
  cubicweb-ctl create blog blogdemo

Cette commande va créer un répertoire ``~/etc/cubicweb.d/blogdemo``
contenant tous les fichiers de configuration nécessaire au lancement
de votre application web.

L'instance ``blogdemo`` est construite sur le cube ``blog``.

Bienvenue dans votre application web
------------------------------------

Lancez votre application en exécutant : ::

  cubicweb-ctl start -D blogdemo


Vous pouvez à présent accéder  à votre application web vous permettant de
créer des blogs et d'y poster des messages en visitant l'URL http://localhost:8080/.
Un premier formulaire d'authentification va vous être proposé. Par défaut,
l'application n'autorisera pas d'utilisateur anonyme à accéder a votre 
application. Vous devrez donc utiliser l'utilisateur administrateur que
vous aurez crée lors de l'initialisation de votre base de données via
``cubicweb-ctl create``.

.. image:: ../images/login-form.png


Une fois authentifié, vous pouvez commencer à jouer avec votre
application et créer des entités. Bravo !

.. image:: ../images/blog-demo-first-page.png


Vous trouverez de plus amples explications de ces étapes dans notre
tutoriel (:ref:`tutorielGAE`).




Définissez les vues de vos données
----------------------------------

Les vues correspondantes au modele de données sont définies dans ``views.py``
de votre cube ``blog``.

:: 

  __docformat__ = "restructuredtext en"

  from mx.DateTime import DateTime
  from logilab.mtconverter import html_escape

  from cubicweb.common.uilib import text_cut
  from cubicweb.common.view import EntityView
  from cubicweb.web.views import baseviews
  from cubicweb.web.views.boxes import BoxTemplate, BoxHtml
  from cubicweb.web.views.calendar import MONTHNAMES
  from cubicweb.web.htmlwidgets import BoxLink, BoxWidget


  class BlogPrimaryView(baseviews.PrimaryView):
    accepts = ('Blog',)
    skip_attrs = baseviews.PrimaryView.skip_attrs + ('title',)

    def render_entity_title(self, entity):
        self.w(u'<h1>%s</h1>' % html_escape(entity.dc_title()))

    def render_entity_relations(self, entity, siderelations):
        rset = entity.related('entry_of', 'object')
        self.pagination(self.req, rset, self.w)
        self.wview('list', rset, 'null', title='')
    

  class BlogEntryPrimaryView(baseviews.PrimaryView):
    accepts = ('BlogEntry',)
    skip_attrs = baseviews.PrimaryView.skip_attrs + ('title',)
    show_attr_label = False

    def render_entity_title(self, entity):
        self.w(u'<h1>%s</h1>' % html_escape(entity.dc_title()))

    def content_format(self, entity):
        return entity.view('reledit', rtype='content_format')


